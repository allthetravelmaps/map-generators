#!/usr/bin/env bash

workingDir="${BASH_SOURCE%/*}"
buildDir="${workingDir}/build"
wofIdsFile="${workingDir}/wofIds"

cleanFirst=false
downloadConcurrency=6 # copying chrome, max connections per hostname
wofAltOpts="-s uscensus -f display -e terrestrial-zoom-10"
quantization=1e5 # upper bound: ~1m
simplification=0.001 # upper bound: ~10km^2

title="States of the USA"
titleSlug='states-of-the-usa'
description="The 50 states, and the District of Columbia, of the United States of America."
license="Data from Who's On First. <a href="http://whosonfirst.mapzen.com#License">License</a>"

# dependencies
jqBin=jq                  # https://stedolan.github.io/jq/
mapshaperBin=mapshaper    # https://github.com/mbloch/mapshaper
parallelBin=parallel      # https://www.gnu.org/software/parallel/
geo2topoBin=geo2topo      # https://github.com/topojson/topojson
wofDownloadBin="${workingDir}/../wof-download"

usage() {
  echo "Usage: $0 [-c] [-h]"
  echo "  -c  Clean out build directory first"
  echo "  -h  Display this help message"
}

while getopts 'ch' opt; do
  case $opt in
    c)
      cleanFirst=true
      ;;
    h)
      usage
      exit 0
      ;;
    *)
      usage
      exit 1
      ;;
  esac
done

mkdir -p "$buildDir"

if [ "$cleanFirst" = true ]; then
  echo "Cleaning out build dir $buildDir"
  # avoid dangerously broad deletes (ie rm -rf)
  find "$buildDir" -type f -d 1 -delete
fi

echo "Setting creation timestamp"
now=$(date -u +%s)
nowSlug=$(date -r $now -u +"%Y%m%d-%H%M%S")
outputMapFilename="$titleSlug.$nowSlug.map.topojson"
outputMetaFilename="$titleSlug.$nowSlug.meta.json"

wofIds=$(cat "$wofIdsFile" |  sed -e 's/#.*$//' -e '/^$/d')
wofIdsCount=$(echo "$wofIds" | wc -l | tr -d '[:space:]')

echo "Downloading (if not already cached) 2x$wofIdsCount WOF geojson files, $downloadConcurrency at a time"
wofDefaultGeomPaths=$($parallelBin -j "$downloadConcurrency" "$wofDownloadBin" -o "$buildDir" ::: $wofIds)
wofAltGeomPaths=$($parallelBin -j "$downloadConcurrency" "$wofDownloadBin" -o "$buildDir" $wofAltOpts ::: $wofIds)

echo "Building meta file"
metaJson=$($jqBin -n "{title: \"$title\", titleSlug: \"$titleSlug\", description: \"$description\",
                       generatedAt: $now | todate, license: \"$license\", objects: {}}")
for wofPath in $wofDefaultGeomPaths; do
  wofId=$(jq '.id' "$wofPath")
  wofNameQuoted=$(jq '.properties."wof:name"' "$wofPath")
  metaJson=$(echo $metaJson | $jqBin ".objects += {\"$wofId\": $wofNameQuoted}")
done

echo "Combining downloaded geojson files to form map topojson file"
geo2topoArgs=""
for wofPath in $wofAltGeomPaths; do
  wofId=$(jq '.id' "$wofPath")
  wofTrimmedPath="$buildDir/$wofId.trimmed.geojson"
  $jqBin -c '{id, type, geometry}' "$wofPath" > "$wofTrimmedPath"
  geo2topoArgs+=" $wofId=$wofTrimmedPath"
done

echo "Writing meta file out to '$outputMetaFilename'"
echo $metaJson | $jqBin -c . > "$outputMetaFilename"

echo "Writing map file out to '$outputMapFilename'"
$geo2topoBin $geo2topoArgs > "$outputMapFilename"
