#!/usr/bin/env python3
#
# Build the meta file, output result to stdout

import argparse
import configparser
import json
import os

parser = argparse.ArgumentParser(description='Build the meta file')
parser.add_argument('-c', dest='config_file', required=True, type=argparse.FileType('r'), help='generate-meta configuration file')
parser.add_argument('-d', dest='downloads_dir', help='directory to look for saved geojson in')
args = parser.parse_args()

config = configparser.RawConfigParser(allow_no_value=True)
config.readfp(args.config_file)

def lookup_name_in_wof_geojson(section, wofid):
    if not args.downloads_dir:
        raise Exception('The [-d DOWNLOADS_DIR] option is required in this case since not all wofids have names in the config file')
    path = os.path.join(args.downloads_dir, section, '{}.geojson'.format(wofid))
    with open(path, 'r') as fh:
        geojson = json.loads(fh.read())
    return geojson['properties']['wof:name']

def build_ds(config):
    ds = {
        'title': config.get('meta', 'title'),
        'title_slug': config.get('meta', 'title-slug'),
        'description': config.get('meta', 'description'),
        'license': config.get('meta', 'license'),
        'objects': {},
    }
    for section, _ in config.items('meta-objects'):
        for wofid, name in config.items(section):
            if not name:
                name = lookup_name_in_wof_geojson(section, wofid)
            ds['objects'][wofid] = name

    return ds

ds = build_ds(config)
print(json.dumps(ds, ensure_ascii=False))
