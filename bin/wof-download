#!/usr/bin/env bash
#
# Download one or more WOF records to a given output directory.

# set -x

# The mapzen python packaging system is a work in progress.
# Easiest way to get this working on your system as of 2017/09/25:
#   pip install https://github.com/whosonfirst/py-mapzen-whosonfirst-uri/tarball/master
#   pip install https://github.com/whosonfirst/py-mapzen-whosonfirst-sources/tarball/master
wofId2PathBin=wof-id2path

curlBin=curl # https://curl.haxx.se/
parallelBin=parallel # https://www.gnu.org/software/parallel/
wofDownloadBin="${BASH_SOURCE[0]}"

wofDataRoot="https://whosonfirst.mapzen.com/data"
downloadConcurrency=6  # copying chrome

error () {
  [ ! -z "$1" ] && echo "$0: $1" 1>&2
  usage 1
}

usage() {
  echo "Usage: $0 [options] [wofId]"
  echo "  Options:"
  echo "    -h               Display this help message"
  echo "    -d <outputDir>   Required. Directory to save files to"
  echo "    -o <wofOpts>     String of WOF opts to use with wof-id2path. Ex:"
  echo "                     '-s uscensus -f display -e terrestrial-zoom-10'"
  echo "    -f <wofIdsFile>  File full of WOF IDs to download"
  exit "$1"
}

wofOpts=""
wofIdsFile=""
outputDir=""
while getopts 'd:o:f:h' opt; do
  case $opt in
    d) outputDir="$OPTARG" ;;
    o) wofOpts="$OPTARG" ;;
    f) wofIdsFile="$OPTARG" ;;
    h) usage 0 ;;
    *) error ;;
  esac
done

[ -z "$outputDir" ] && error "missing required option -- -d <outputDir>"

wofId="${!OPTIND}"
[[ -z "$wofId" && -z "$wofIdsFile" || ! -z "$wofId" && ! -z "$wofIdsFile" ]] \
   && error "exactly one of '-f <wofIdsFile>' or <wofId> positional parameter required"

if [ ! -z "$wofId" ]; then
  downloadTo="$outputDir/$("$wofId2PathBin" $wofOpts "$wofId")"
  downloadFrom=$("$wofId2PathBin" -a --abspath-root="$wofDataRoot" $wofOpts "$wofId")
  $curlBin -s -S -o "$downloadTo" "$downloadFrom"
  echo $downloadTo # TODO: remove me once all maps upgraded
fi

if [ ! -z "$wofIdsFile" ]; then
  wofIds=$(cat "$wofIdsFile" |  sed -e 's/#.*$//' -e '/^$/d')
  mkdir -p "$outputDir"
  $parallelBin -j "$downloadConcurrency" "$wofDownloadBin" -d "$outputDir" "${wofOpts:+-o '$wofOpts'}" ::: $wofIds
fi
