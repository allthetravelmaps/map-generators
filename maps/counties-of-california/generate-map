#!/usr/bin/env bash

workingDir="${BASH_SOURCE%/*}"
countyGeomsDir="$workingDir/downloads/county-geoms"
caGeomDir="$workingDir/downloads/ca-geom"
trimmedDir="$workingDir/build/trimmed-geoms"

binDir="${workingDir}/../../bin"
geojsonIntersectBin="$binDir/geojson-intersect"

# dependencies
geojsonMergeBin=geojson-merge    # https://github.com/mapbox/geojson-merge
geojsonExtentBin=geojson-extent  # https://github.com/mapbox/geojson-extent
jqBin=jq                         # https://stedolan.github.io/jq/

# https://github.com/topojson/topojson
geo2topoBin=geo2topo
topo2geoBin=topo2geo
topoquantizeBin=topoquantize
toposimplifyBin=toposimplify

# https://github.com/d3/d3-geo
# https://github.com/d3/d3-geo-projection
geo2svgBin=geo2svg
geoprojectBin=geoproject

# scaling, simplification
pixels=960
simplification=1
quantization=1000
subPixelPercision=0

# TODO: probably better to read in wofids again rather than rely on dir being correct
mkdir -p "$trimmedDir"
caGeomPath="$caGeomDir/*"
trimmedGeomPaths=''
for wofPath in "$countyGeomsDir"/*; do
  wofId=$(jq '.id' "$wofPath")
  trimmedGeomPath="$trimmedDir/$wofId.trimmed.geojson"
  goodTypes='["Polygon", "MultiPolygon", "GeometryCollection", "Feature"]'
  # Make sure not to loose our wofId
  # Doing the intersection sometimes gives us some bunk shapes, filter them out
  # Note that jq 1.5 (latest as of 2017/09/28) lacks support for a sql-like IN
  # operator, but that will be landing in 1.6.
  # https://github.com/stedolan/jq/issues/1322
  $geojsonMergeBin $wofPath $caGeomPath | $geojsonIntersectBin -p | $jqBin ".id |= $wofId" > $trimmedGeomPath
  trimmedGeomPaths+=" $trimmedGeomPath"
done

# using http://spatialreference.org/ref/epsg/nad83-california-albers/
geojson=$($geojsonMergeBin $trimmedGeomPaths \
        | $geoprojectBin "d3.geoConicEqualArea().parallels([34.0, 40.5]).rotate([120, 0])")

# move top left to [0, 0], scale it appropriately
read xmin ymin xmax ymax < <(echo "$geojson" | $geojsonExtentBin | tr '[,]', ' ')
geojson=$(echo $geojson \
          | $geoprojectBin "d3.geoIdentity().translate([-$xmin, -$ymin])" \
          | $geoprojectBin "d3.geoIdentity().scale($pixels/Math.max($xmax-$xmin, $ymax-$ymin))")

# get our final dimens
read xmin ymin xmax ymax < <(echo "$geojson" | $geojsonExtentBin | tr '[,]', ' ')

topojson=$(echo $geojson \
           | $geo2topoBin - \
           | $toposimplifyBin -f -p $simplification \
           | $topoquantizeBin $quantization)
svg=$(echo $topojson \
      | $topo2geoBin - \
      | $jqBin -c '.features[]' \
      | $geo2svgBin -n -w "$xmax" -h "$ymax" -p "$subPixelPercision")

echo $svg
