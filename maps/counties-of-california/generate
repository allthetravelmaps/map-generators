#!/usr/bin/env bash

workingDir="${BASH_SOURCE%/*}"
buildDir="${workingDir}/build"
binDir="${workingDir}/../../bin"
includesDir="${workingDir}/../../includes"

title="Counties of California"
titleSlug='counties-of-california'
description="The 58 counties of California."
license="Data from Who's On First. <a href="http://whosonfirst.mapzen.com#License">License</a>"

geojsonIntersectBin="$binDir/geojson-intersect"
wofDownloadBin="$binDir/wof-download"
downloadConcurrency=6 # copying chrome, max connections per hostname

# dependencies
geojsonMergeBin=geojson-merge    # https://github.com/mapbox/geojson-merge
geojsonExtentBin=geojson-extent  # https://github.com/mapbox/geojson-extent
jqBin=jq                         # https://stedolan.github.io/jq/
ndjsonSplitBin=ndjson-split      # https://github.com/mbostock/ndjson-cli
parallelBin=parallel             # https://www.gnu.org/software/parallel/

# https://github.com/topojson/topojson
geo2topoBin=geo2topo
topo2geoBin=topo2geo
topoquantizeBin=topoquantize
toposimplifyBin=toposimplify

# https://github.com/d3/d3-geo
# https://github.com/d3/d3-geo-projection
geo2svgBin=geo2svg
geoprojectBin=geoproject

# scaling, simplification
pixels=960
simplification=1
quantization=1000
subPixelPercision=0

clean=false
source "$includesDir/process-opts.bash"
source "$includesDir/manage-build-dir.bash"

echo "Setting creation timestamp"
now=$(date -u +%s)
nowSlug=$(date -r $now -u +"%Y%m%d-%H%M%S")
outputMapFilename="$titleSlug.$nowSlug.map.svg"
outputMetaFilename="$titleSlug.$nowSlug.meta.json"

echo "Downloading WOF geojson files"
wofGeomPaths=$($wofDownloadBin -d "$buildDir" -f "$workingDir/wofIds")

echo "Downloading WOF geojson for california"
caWofId=85688637
caWofOpts="-A -S uscensus -F display -E terrestrial-zoom-10"
caGeomPath=$("$wofDownloadBin" -d "$buildDir" -o "$caWofOpts" $caWofId)

echo "Building meta file"
metaJson=$($jqBin -n "{title: \"$title\", titleSlug: \"$titleSlug\", description: \"$description\",
                       generatedAt: $now | todate, license: \"$license\", objects: {}}")
for wofPath in $wofGeomPaths; do
  wofId=$(jq '.id' "$wofPath")
  wofNameQuoted=$(jq '.properties."wof:name"' "$wofPath")
  metaJson=$(echo $metaJson | $jqBin ".objects += {\"$wofId\": $wofNameQuoted}")
done

echo "Intersecting each county geojson with CA geojson to get a good coastline"
trimmedGeomPaths=''
for wofPath in $wofGeomPaths; do
  wofId=$(jq '.id' "$wofPath")
  trimmedGeomPath="$buildDir/$wofId.trimmed.geojson"
  goodTypes='["Polygon", "MultiPolygon", "GeometryCollection", "Feature"]'
  # Make sure not to loose our wofId
  # Doing the intersection sometimes gives us some bunk shapes, filter them out
  # Note that jq 1.5 (latest as of 2017/09/28) lacks support for a sql-like IN
  # operator, but that will be landing in 1.6.
  # https://github.com/stedolan/jq/issues/1322
  $geojsonMergeBin $wofPath $caGeomPath | $geojsonIntersectBin -p | $jqBin ".id |= $wofId" > $trimmedGeomPath
  trimmedGeomPaths+=" $trimmedGeomPath"
done

echo "Merging, projecting, translating, and scaling geojson"
# using http://spatialreference.org/ref/epsg/nad83-california-albers/
geojson=$($geojsonMergeBin $trimmedGeomPaths \
        | $geoprojectBin "d3.geoConicEqualArea().parallels([34.0, 40.5]).rotate([120, 0])")

# move top left to [0, 0], scale it appropriately
read xmin ymin xmax ymax < <(echo "$geojson" | $geojsonExtentBin | tr '[,]', ' ')
geojson=$(echo $geojson \
          | $geoprojectBin "d3.geoIdentity().translate([-$xmin, -$ymin])" \
          | $geoprojectBin "d3.geoIdentity().scale($pixels/Math.max($xmax-$xmin, $ymax-$ymin))")

# get our final dimens
read xmin ymin xmax ymax < <(echo "$geojson" | $geojsonExtentBin | tr '[,]', ' ')

echo "Converting geojson to topojson, simplifying and quantizing, then convert through geojson & ndjson to svg"
topojson=$(echo $geojson \
           | $geo2topoBin "$topojsonLayer=-" \
           | $toposimplifyBin -f -p $simplification \
           | $topoquantizeBin $quantization)
svg=$(echo $topojson \
      | $topo2geoBin "$topojsonLayer=-" \
      | $ndjsonSplitBin 'd.features' \
      | $geo2svgBin -n -w "$xmax" -h "$ymax" -p "$subPixelPercision")

echo "Writing map svg and meta json output to:"
echo "  $outputMapFilename"
echo "  $outputMetaFilename"

echo $metaJson | $jqBin -c . > "$outputMetaFilename"
echo $svg > "$outputMapFilename"
