#!/usr/bin/env python3
#
# Download one or more WOF records to a given output directory.

import argparse
import configparser
import multiprocessing.dummy
import os
import urllib.request

parser = argparse.ArgumentParser(description='Download WOF records')
parser.add_argument('-v', '--verbose', action='store_true', help='ouput some info to stdout during execution')
parser.add_argument('-c', dest='config_file', required=True, type=argparse.FileType('r'), help='wof-download configuration file')
parser.add_argument('-d', dest='downloads_dir', required=True, help='directory to save files to')
parser.add_argument('--concurrency', dest='download_concurrency', default=6, type=int)
parser.add_argument('-w', dest='wof_data_root', default=os.getenv('WOF_DATA_ROOT', 'https://whosonfirst.mapzen.com/data'))
args = parser.parse_args()

config = configparser.RawConfigParser(allow_no_value=True)
config.readfp(args.config_file)

def id2path(wofid):
    # From https://github.com/whosonfirst/py-mapzen-whosonfirst-uri/blob/c0450c3faea2/mapzen/whosonfirst/uri/__init__.py#L112
    # (that module is not yet python3 compatible)
    tmp = str(wofid)
    parts = []
    while len(tmp) > 3:
        parts.append(tmp[0:3])
        tmp = tmp[3:]
    if len(tmp):
        parts.append(tmp)

    return os.path.join(*parts)

def id2filename(wofid, alt):
    if alt:
        return '{}-{}.geojson'.format(wofid, alt)
    return '{}.geojson'.format(wofid)

def do_download(pair):
    retrieve_from, save_to = pair
    if args.verbose:
        print('{} -> {}'.format(retrieve_from, save_to))
    urllib.request.urlretrieve(retrieve_from, save_to)

def make_directories(directories):
    for directory in directories:
        if not os.path.isdir(directory):
            os.makedirs(directory)

def compile_directories_and_download_tasks(config):
    directories = []
    download_tasks = []
    for section, alt in config.items('wof-download'):
        section_dir = os.path.join(args.downloads_dir, section)
        directories.append(section_dir)

        for wofid, name in config.items(section):
            retrieve_from = os.path.join(args.wof_data_root, id2path(wofid), id2filename(wofid, alt))
            save_to = os.path.join(section_dir, '{}.geojson'.format(wofid))
            download_tasks.append((retrieve_from, save_to))

    return directories, download_tasks

directories, download_tasks = compile_directories_and_download_tasks(config)
make_directories(directories)
multiprocessing.dummy.Pool(args.download_concurrency).map(do_download, download_tasks)
